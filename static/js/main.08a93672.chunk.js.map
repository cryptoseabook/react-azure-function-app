{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["endpoint","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomLabels","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","response","wrap","_context","prev","next","preventDefault","console","log","setState","load","axios","get","sent","label","data","stop","_x","apply","arguments","getRandomNumbers","_ref2","_callee2","_context2","number","_x2","state","react_default","createElement","className","onClick","role","aria-hidden","style","color","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08a93672.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nconst endpoint = \"http://localhost:7071/api\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: \"\",\n      number: \"\",\n      load: false\n    }\n  }\n  \n  getRandomLabels = async (event) => {\n    event.preventDefault()\n\n    console.log(endpoint)\n    this.setState({\n      load: true\n    })\n    let response = await axios.get(endpoint + \"/getRandomLabel?labelGroup=A-E\");\n    console.log(response)\n    this.setState({\n      label: response.data,\n      load: false\n    })\n\n  }\n\n  getRandomNumbers = async (event) => {\n    event.preventDefault()\n    this.setState({\n      load: true\n    })\n    let response = await axios.get(endpoint + \"/getRandomNumber?totalDigits=1\");\n    console.log(response)\n    this.setState({\n      number: response.data,\n      load: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"masthead d-flex\">\n        <div className=\"container text-center my-auto\">\n          <h1 className=\"mb-1\">幸运大抽奖</h1>\n          <h3 className=\"mb-5\">\n            <em>一个前端ReactJs 后端Servless function 架构的牛逼随机数生成器</em>\n          </h3>\n          <button className=\"btn btn-primary btn-xl js-scroll-trigger\" onClick={this.getRandomLabels}>抽字母组</button> \n          <button className=\"btn btn-primary btn-xl js-scroll-trigger ml-5\" onClick={this.getRandomNumbers} >抽数字组</button>\n          {this.state.load ? <div><span className=\"spinner-border text-light mt-2\" role=\"status\" aria-hidden=\"true\"></span><span className=\"sr-only\">Loading...</span></div>:<div></div>}\n          <div className=\"result mt-5\">\n            <b>幸运组:</b><span className=\"result-group result-letter-group\">{this.state.label}</span>\n            <b>幸运数字:</b><span className=\"result-group result-letter-group\">{this.state.number}</span>\n          </div>\n          <div className=\"footer mt-5\">\n            <span style={{color: 'red'}}>♥</span> Built by <a href=\"https://www.linkedin.com/in/seabookchen/\">Seabook Chen</a>@iters.com.au\n          </div>\n        </div>\n      </div>    \n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}